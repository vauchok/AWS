AWSTemplateFormatVersion: 2010-09-09
Description: Template to launch an Amazon Linux instance.
Parameters:
  InstanceType:
    Type: String
    Description: Instance Flavour
    Default: t2.micro
  ImageId:
    Type: 'AWS::EC2::Image::Id'
    Description: AMI image id
    Default: ami-97785bed
  Subnet1:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Choose which subnet this instance should be deployed to
    Default: subnet-3935b516
  Subnet2:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Choose which subnet this instance should be deployed to
    Default: subnet-106a245b
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Identificetor of vpc
    Default: vpc-89dd85f1
  SshKeypair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the KeyPair to bootstrap the instance
    Default: test

Resources:
  LBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to App LB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22 and HTTP access via 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: LoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt 
          - LBSecurityGroup
          - GroupId
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      LBCookieStickinessPolicy:
        - PolicyName: SticknessPolicy
          CookieExpirationPeriod: 180
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames:
            - SticknessPolicy
      HealthCheck:
        Target: 'TCP:80'
        HealthyThreshold: 2
        UnhealthyThreshold: 9
        Interval: 30
        Timeout: 15
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 50
      ResourceSignal:
        Count: 3
        Timeout: PT15M
    Properties:
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
      Cooldown: 300
      HealthCheckGracePeriod: 3600
      HealthCheckType: EC2
      LoadBalancerNames:
        - !Ref WebLoadBalancer
      LaunchConfigurationName: !Ref LaunchConfig
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install_base
        install_base:
          packages:
            yum:
            # Example packages:
              bash-completion: []
              wget: []
              curl: []
              zip: []
              unzip: []
              telnet: []
              ftp: []
              cvs: []
              git: []
              ksh: []
          files:
            # These files are needed for CloudFormation::Init to work
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource Server
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
          commands:
            install_codedeploy:
              command: !Sub |
                #!/bin/bash
                yum -y install ruby
                wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
                chmod +x ./install && ./install auto
                service codedeploy-agent start
              cwd: '~'
    Properties:
    #Autogenerated filesystem layout
      BlockDeviceMappings:
        # /
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 40
            VolumeType: gp2
            DeleteOnTermination: true
        # /apps
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
            DeleteOnTermination: true
        # /logs
        - DeviceName: /dev/xvdc
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
            DeleteOnTermination: true
        # swap
        - DeviceName: /dev/xvdd
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
            DeleteOnTermination: true
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref SshKeypair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install aws-cli
          curl -O https://bootstrap.pypa.io/get-pip.py
          python get-pip.py
          pip install awscli --upgrade
          export PATH=~/.local/bin:$PATH

          /usr/bin/easy_install --script-dir /opt/aws/bin \
            https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/lib/python2*/site-packages/aws_cfn_bootstrap*/init/redhat/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region}

